version: '3.8'

services:
  # Base de données MySQL pour les données structurées
  mysql:
    image: mysql:8.0
    container_name: ecoride_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql/structure.sql:/docker-entrypoint-initdb.d/01_structure.sql
      - ./sql/data.sql:/docker-entrypoint-initdb.d/02_data.sql
    ports:
      - "3306:3306"
    networks:
      - ecoride_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Base de données MongoDB pour les préférences et logs
  mongodb:
    image: mongo:6.0
    container_name: ecoride_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    networks:
      - ecoride_network

  # Application PHP avec Apache
  webapp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecoride_webapp
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_started
    environment:
      # Configuration base de données MySQL
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Configuration MongoDB
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB: ${MONGO_DB}
      
      # Configuration application
      APP_ENV: development
      APP_DEBUG: true
      APP_URL: http://localhost:8080
      
      # Configuration des crédits
      INITIAL_CREDITS: ${INITIAL_CREDITS}
      PLATFORM_FEE_CREDITS: ${PLATFORM_FEE_CREDITS}
      
      # Configuration mail (si nécessaire)
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      
    volumes:
      - ./:/var/www/html
    ports:
      - "8080:80"
    networks:
      - ecoride_network

  # PHPMyAdmin pour la gestion MySQL
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5.2
    container_name: ecoride_phpmyadmin
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      PMA_HOST: ${DB_HOST}
      PMA_PORT: ${DB_PORT}
      PMA_USER: ${DB_USER}
      PMA_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - "8081:80"
    networks:
      - ecoride_network

  # Mongo Express pour la gestion MongoDB
  mongo-express:
    image: mongo-express:1.0
    container_name: ecoride_mongo_express
    restart: unless-stopped
    depends_on:
      - mongodb
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
    ports:
      - "8082:8081"
    networks:
      - ecoride_network

  # Redis pour la gestion des sessions et cache
  redis:
    image: redis:7-alpine
    container_name: ecoride_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ecoride_network

  # Service de sauvegarde automatique
  backup:
    image: alpine:latest
    container_name: ecoride_backup
    restart: "no"
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_started
    environment:
      MYSQL_HOST: ${DB_HOST}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - ecoride_network
    command: >
      sh -c "
      apk add --no-cache mysql-client mongodb-tools &&
      chmod +x /backup.sh &&
      /backup.sh
      "

# Définition des volumes persistants
volumes:
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

# Définition du réseau
networks:
  ecoride_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16